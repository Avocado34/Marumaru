//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `ComicDetail`.
    static let comicDetail = _R.storyboard.comicDetail()
    /// Storyboard `ComicStrip`.
    static let comicStrip = _R.storyboard.comicStrip()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PopOverComicEpisode`.
    static let popOverComicEpisode = _R.storyboard.popOverComicEpisode()
    /// Storyboard `SearchComic`.
    static let searchComic = _R.storyboard.searchComic()
    /// Storyboard `WatchHistory`.
    static let watchHistory = _R.storyboard.watchHistory()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ComicDetail", bundle: ...)`
    static func comicDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.comicDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ComicStrip", bundle: ...)`
    static func comicStrip(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.comicStrip)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PopOverComicEpisode", bundle: ...)`
    static func popOverComicEpisode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popOverComicEpisode)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchComic", bundle: ...)`
    static func searchComic(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchComic)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WatchHistory", bundle: ...)`
    static func watchHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.watchHistory)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 22 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `accent-blue-lightest`.
    static let accentBlueLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-blue-lightest")
    /// Color `accent-blue`.
    static let accentBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-blue")
    /// Color `accent-gray`.
    static let accentGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-gray")
    /// Color `accent-green`.
    static let accentGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-green")
    /// Color `accent-purple`.
    static let accentPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-purple")
    /// Color `accent-yellow`.
    static let accentYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent-yellow")
    /// Color `background-gray-lighter`.
    static let backgroundGrayLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "background-gray-lighter")
    /// Color `background-gray-lightest`.
    static let backgroundGrayLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "background-gray-lightest")
    /// Color `background-white`.
    static let backgroundWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "background-white")
    /// Color `icon-black-light`.
    static let iconBlackLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "icon-black-light")
    /// Color `icon-black-lighter`.
    static let iconBlackLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "icon-black-lighter")
    /// Color `icon-black-lightest`.
    static let iconBlackLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "icon-black-lightest")
    /// Color `icon-black`.
    static let iconBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "icon-black")
    /// Color `icon-white`.
    static let iconWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "icon-white")
    /// Color `line-gray-lighter`.
    static let lineGrayLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "line-gray-lighter")
    /// Color `shadow-gray`.
    static let shadowGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadow-gray")
    /// Color `text-black-light`.
    static let textBlackLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "text-black-light")
    /// Color `text-black-lighter`.
    static let textBlackLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "text-black-lighter")
    /// Color `text-black-lightest`.
    static let textBlackLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "text-black-lightest")
    /// Color `text-black`.
    static let textBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "text-black")
    /// Color `text-white`.
    static let textWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "text-white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-blue-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentBlueLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentBlueLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-purple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent-yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background-gray-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGrayLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGrayLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background-gray-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGrayLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGrayLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background-white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icon-black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icon-black-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icon-black-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icon-black-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "icon-white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "line-gray-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGrayLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGrayLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadow-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text-black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text-black-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text-black-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text-black-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text-white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-blue-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentBlueLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentBlueLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-purple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent-yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background-gray-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGrayLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGrayLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background-gray-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGrayLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGrayLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background-white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icon-black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icon-black-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icon-black-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icon-black-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "icon-white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "line-gray-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGrayLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGrayLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadow-gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text-black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text-black-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text-black-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text-black-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text-white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textWhite.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `loading_cat.json`.
    static let loading_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_cat", pathExtension: "json")
    /// Resource file `loading_cat_radial.json`.
    static let loading_cat_radialJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_cat_radial", pathExtension: "json")
    /// Resource file `loading_square.json`.
    static let loading_squareJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_square", pathExtension: "json")
    /// Resource file `not_found.json`.
    static let not_foundJson = Rswift.FileResource(bundle: R.hostingBundle, name: "not_found", pathExtension: "json")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_cat", withExtension: "json")`
    static func loading_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_cat_radial", withExtension: "json")`
    static func loading_cat_radialJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_cat_radialJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_square", withExtension: "json")`
    static func loading_squareJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_squareJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "not_found", withExtension: "json")`
    static func not_foundJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.not_foundJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `magnifying-glass`.
    static let magnifyingGlass = Rswift.ImageResource(bundle: R.hostingBundle, name: "magnifying-glass")
    /// Image `main-logo`.
    static let mainLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "main-logo")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `placeholder-tile`.
    static let placeholderTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder-tile")
    /// Image `triangle-left`.
    static let triangleLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle-left")
    /// Image `triangle-right`.
    static let triangleRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle-right")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magnifying-glass", bundle: ..., traitCollection: ...)`
    static func magnifyingGlass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magnifyingGlass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "main-logo", bundle: ..., traitCollection: ...)`
    static func mainLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder-tile", bundle: ..., traitCollection: ...)`
    static func placeholderTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderTile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "triangle-left", bundle: ..., traitCollection: ...)`
    static func triangleLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangleLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "triangle-right", bundle: ..., traitCollection: ...)`
    static func triangleRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangleRight, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ComicEpisodeThumbnailTableCell`.
    static let comicEpisodeThumbnailTableCell = _R.nib._ComicEpisodeThumbnailTableCell()
    /// Nib `ComicRankTableCell`.
    static let comicRankTableCell = _R.nib._ComicRankTableCell()
    /// Nib `ComicThumbnailCollectionCell`.
    static let comicThumbnailCollectionCell = _R.nib._ComicThumbnailCollectionCell()
    /// Nib `PopOverComicEpisodeTableCell`.
    static let popOverComicEpisodeTableCell = _R.nib._PopOverComicEpisodeTableCell()
    /// Nib `SearchResultComicTableCell`.
    static let searchResultComicTableCell = _R.nib._SearchResultComicTableCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicEpisodeThumbnailTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicEpisodeThumbnailTableCell) instead")
    static func comicEpisodeThumbnailTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicEpisodeThumbnailTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicRankTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicRankTableCell) instead")
    static func comicRankTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicRankTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicThumbnailCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicThumbnailCollectionCell) instead")
    static func comicThumbnailCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicThumbnailCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopOverComicEpisodeTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popOverComicEpisodeTableCell) instead")
    static func popOverComicEpisodeTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popOverComicEpisodeTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultComicTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultComicTableCell) instead")
    static func searchResultComicTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultComicTableCell)
    }
    #endif

    static func comicEpisodeThumbnailTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicEpisodeThumbnailTableCell? {
      return R.nib.comicEpisodeThumbnailTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicEpisodeThumbnailTableCell
    }

    static func comicRankTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicRankTableCell? {
      return R.nib.comicRankTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicRankTableCell
    }

    static func comicThumbnailCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicThumbnailCollectionCell? {
      return R.nib.comicThumbnailCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicThumbnailCollectionCell
    }

    static func popOverComicEpisodeTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopOverComicEpisodeTableCell? {
      return R.nib.popOverComicEpisodeTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopOverComicEpisodeTableCell
    }

    static func searchResultComicTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultComicTableCell? {
      return R.nib.searchResultComicTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultComicTableCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ComicEpisodeThumbnailTableCell`.
    static let comicEpisodeThumbnailTableCell: Rswift.ReuseIdentifier<ComicEpisodeThumbnailTableCell> = Rswift.ReuseIdentifier(identifier: "ComicEpisodeThumbnailTableCell")
    /// Reuse identifier `ComicRankTableCell`.
    static let comicRankTableCell: Rswift.ReuseIdentifier<ComicRankTableCell> = Rswift.ReuseIdentifier(identifier: "ComicRankTableCell")
    /// Reuse identifier `ComicThumbnailCollectionCell`.
    static let comicThumbnailCollectionCell: Rswift.ReuseIdentifier<ComicThumbnailCollectionCell> = Rswift.ReuseIdentifier(identifier: "ComicThumbnailCollectionCell")
    /// Reuse identifier `PopOverComicEpisodeTableCell`.
    static let popOverComicEpisodeTableCell: Rswift.ReuseIdentifier<PopOverComicEpisodeTableCell> = Rswift.ReuseIdentifier(identifier: "PopOverComicEpisodeTableCell")
    /// Reuse identifier `SearchResultComicTableCell`.
    static let searchResultComicTableCell: Rswift.ReuseIdentifier<SearchResultComicTableCell> = Rswift.ReuseIdentifier(identifier: "SearchResultComicTableCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _ComicEpisodeThumbnailTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicEpisodeThumbnailTableCell

      let bundle = R.hostingBundle
      let identifier = "ComicEpisodeThumbnailTableCell"
      let name = "ComicEpisodeThumbnailTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicEpisodeThumbnailTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicEpisodeThumbnailTableCell
      }

      fileprivate init() {}
    }

    struct _ComicRankTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicRankTableCell

      let bundle = R.hostingBundle
      let identifier = "ComicRankTableCell"
      let name = "ComicRankTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicRankTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicRankTableCell
      }

      fileprivate init() {}
    }

    struct _ComicThumbnailCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicThumbnailCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ComicThumbnailCollectionCell"
      let name = "ComicThumbnailCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicThumbnailCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicThumbnailCollectionCell
      }

      fileprivate init() {}
    }

    struct _PopOverComicEpisodeTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PopOverComicEpisodeTableCell

      let bundle = R.hostingBundle
      let identifier = "PopOverComicEpisodeTableCell"
      let name = "PopOverComicEpisodeTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopOverComicEpisodeTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopOverComicEpisodeTableCell
      }

      fileprivate init() {}
    }

    struct _SearchResultComicTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchResultComicTableCell

      let bundle = R.hostingBundle
      let identifier = "SearchResultComicTableCell"
      let name = "SearchResultComicTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultComicTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultComicTableCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try comicDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try comicStrip.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popOverComicEpisode.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchComic.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try watchHistory.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct comicDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let comicDetailStoryboard = StoryboardViewControllerResource<ComicDetailViewController>(identifier: "ComicDetailStoryboard")
      let name = "ComicDetail"

      func comicDetailStoryboard(_: Void = ()) -> ComicDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicDetailStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "accent-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-gray' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-green' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-yellow' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-white' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black-light' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black-lighter' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
        }
        if _R.storyboard.comicDetail().comicDetailStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicDetailStoryboard' could not be loaded from storyboard 'ComicDetail' as 'ComicDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct comicStrip: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let comicStripStroyboard = StoryboardViewControllerResource<ComicStripViewController>(identifier: "ComicStripStroyboard")
      let name = "ComicStrip"

      func comicStripStroyboard(_: Void = ()) -> ComicStripViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicStripStroyboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle-left' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle-right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle-right' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-green' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-yellow' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-white' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        }
        if _R.storyboard.comicStrip().comicStripStroyboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicStripStroyboard' could not be loaded from storyboard 'ComicStrip' as 'ComicStripViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainStoryboard = StoryboardViewControllerResource<MainViewController>(identifier: "MainStoryboard")
      let name = "Main"

      func mainStoryboard(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainStoryboard)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.clockwise' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "magnifying-glass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magnifying-glass' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "main-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'main-logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "PointColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PointColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-gray' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-green' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-purple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-purple' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-yellow' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-black' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-black-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-black-lighter' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-white' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black-light' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black-lighter' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-white' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().mainStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainStoryboard' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popOverComicEpisode: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopOverComicEpisode"
      let popOverComicEpisodeStoryboard = StoryboardViewControllerResource<PopOverComicEpisodeViewController>(identifier: "PopOverComicEpisodeStoryboard")

      func popOverComicEpisodeStoryboard(_: Void = ()) -> PopOverComicEpisodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popOverComicEpisodeStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'PopOverComicEpisode', but couldn't be loaded.") }
        }
        if _R.storyboard.popOverComicEpisode().popOverComicEpisodeStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popOverComicEpisodeStoryboard' could not be loaded from storyboard 'PopOverComicEpisode' as 'PopOverComicEpisodeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchComic: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchComic"
      let searchComicStoryboard = StoryboardViewControllerResource<SearchComicViewController>(identifier: "SearchComicStoryboard")

      func searchComicStoryboard(_: Void = ()) -> SearchComicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchComicStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'SearchComic', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ButtonForegroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ButtonForegroundColor' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-green' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-yellow' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-white' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black' is used in storyboard 'SearchComic', but couldn't be loaded.") }
        }
        if _R.storyboard.searchComic().searchComicStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchComicStoryboard' could not be loaded from storyboard 'SearchComic' as 'SearchComicViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct watchHistory: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WatchHistory"
      let watchHistoryStoryboard = StoryboardViewControllerResource<WatchHistoryViewController>(identifier: "WatchHistoryStoryboard")

      func watchHistoryStoryboard(_: Void = ()) -> WatchHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: watchHistoryStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'WatchHistory', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "accent-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-green' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "accent-yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'accent-yellow' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-gray-lightest", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-gray-lightest' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background-white' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "icon-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'icon-white' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-black' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text-white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text-white' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
        }
        if _R.storyboard.watchHistory().watchHistoryStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'watchHistoryStoryboard' could not be loaded from storyboard 'WatchHistory' as 'WatchHistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
