//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `ComicDetail`.
    static let comicDetail = _R.storyboard.comicDetail()
    /// Storyboard `ComicStrip`.
    static let comicStrip = _R.storyboard.comicStrip()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PopOverComicEpisode`.
    static let popOverComicEpisode = _R.storyboard.popOverComicEpisode()
    /// Storyboard `SearchComic`.
    static let searchComic = _R.storyboard.searchComic()
    /// Storyboard `SearchHistory`.
    static let searchHistory = _R.storyboard.searchHistory()
    /// Storyboard `SearchResult`.
    static let searchResult = _R.storyboard.searchResult()
    /// Storyboard `WatchHistory`.
    static let watchHistory = _R.storyboard.watchHistory()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ComicDetail", bundle: ...)`
    static func comicDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.comicDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ComicStrip", bundle: ...)`
    static func comicStrip(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.comicStrip)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PopOverComicEpisode", bundle: ...)`
    static func popOverComicEpisode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.popOverComicEpisode)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchComic", bundle: ...)`
    static func searchComic(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchComic)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchHistory", bundle: ...)`
    static func searchHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchHistory)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchResult", bundle: ...)`
    static func searchResult(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchResult)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WatchHistory", bundle: ...)`
    static func watchHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.watchHistory)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 23 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AccentGreen`.
    static let accentGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentGreen")
    /// Color `AccentRed`.
    static let accentRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentRed")
    /// Color `AccentYellow`.
    static let accentYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentYellow")
    /// Color `BackgroundGray`.
    static let backgroundGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundGray")
    /// Color `BackgroundWhite-light`.
    static let backgroundWhiteLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundWhite-light")
    /// Color `BackgroundWhite-lighter`.
    static let backgroundWhiteLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundWhite-lighter")
    /// Color `BackgroundWhite`.
    static let backgroundWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundWhite")
    /// Color `IconBlack-light`.
    static let iconBlackLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconBlack-light")
    /// Color `IconBlack-lighter`.
    static let iconBlackLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconBlack-lighter")
    /// Color `IconBlack-lightest`.
    static let iconBlackLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconBlack-lightest")
    /// Color `IconBlack`.
    static let iconBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconBlack")
    /// Color `IconWhite`.
    static let iconWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "IconWhite")
    /// Color `LineGray-light`.
    static let lineGrayLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray-light")
    /// Color `LineGray-lighter`.
    static let lineGrayLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray-lighter")
    /// Color `LineGray-lightest`.
    static let lineGrayLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray-lightest")
    /// Color `LineGray`.
    static let lineGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineGray")
    /// Color `ShadowBlack`.
    static let shadowBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ShadowBlack")
    /// Color `TextBlack-light`.
    static let textBlackLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlack-light")
    /// Color `TextBlack-lighter`.
    static let textBlackLighter = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlack-lighter")
    /// Color `TextBlack-lightest`.
    static let textBlackLightest = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlack-lightest")
    /// Color `TextBlack`.
    static let textBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextBlack")
    /// Color `TextWhite`.
    static let textWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextWhite")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentYellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundWhite-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundWhiteLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundWhiteLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundWhite-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundWhiteLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundWhiteLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconBlack-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconBlack-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconBlack-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconBlackLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconBlackLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IconWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGrayLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGrayLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGrayLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGrayLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineGray-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineGrayLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineGrayLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ShadowBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextBlack-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextBlack-lighter", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLighter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLighter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextBlack-lightest", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textBlackLightest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textBlackLightest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentYellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundWhite-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundWhiteLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundWhiteLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundWhite-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundWhiteLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundWhiteLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconBlack-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconBlack-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconBlack-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconBlackLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconBlackLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IconWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGrayLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGrayLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGrayLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGrayLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineGray-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineGrayLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineGrayLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ShadowBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextBlack-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextBlack-lighter", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLighter(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLighter.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextBlack-lightest", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textBlackLightest(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textBlackLightest.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textWhite.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `acrobatic_cat.json`.
    static let acrobatic_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "acrobatic_cat", pathExtension: "json")
    /// Resource file `bubble_tea_cat.json`.
    static let bubble_tea_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "bubble_tea_cat", pathExtension: "json")
    /// Resource file `coming_soon.json`.
    static let coming_soonJson = Rswift.FileResource(bundle: R.hostingBundle, name: "coming_soon", pathExtension: "json")
    /// Resource file `eyes_blinking.json`.
    static let eyes_blinkingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "eyes_blinking", pathExtension: "json")
    /// Resource file `loading_cat_radial.json`.
    static let loading_cat_radialJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading_cat_radial", pathExtension: "json")
    /// Resource file `lying_cat.json`.
    static let lying_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "lying_cat", pathExtension: "json")
    /// Resource file `notification_bell.json`.
    static let notification_bellJson = Rswift.FileResource(bundle: R.hostingBundle, name: "notification_bell", pathExtension: "json")
    /// Resource file `package.json`.
    static let packageJson = Rswift.FileResource(bundle: R.hostingBundle, name: "package", pathExtension: "json")
    /// Resource file `rainbow_cat.json`.
    static let rainbow_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "rainbow_cat", pathExtension: "json")
    /// Resource file `sleeping_cat.json`.
    static let sleeping_catJson = Rswift.FileResource(bundle: R.hostingBundle, name: "sleeping_cat", pathExtension: "json")
    /// Resource file `trophy.json`.
    static let trophyJson = Rswift.FileResource(bundle: R.hostingBundle, name: "trophy", pathExtension: "json")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "acrobatic_cat", withExtension: "json")`
    static func acrobatic_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.acrobatic_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "bubble_tea_cat", withExtension: "json")`
    static func bubble_tea_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bubble_tea_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "coming_soon", withExtension: "json")`
    static func coming_soonJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.coming_soonJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "eyes_blinking", withExtension: "json")`
    static func eyes_blinkingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eyes_blinkingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading_cat_radial", withExtension: "json")`
    static func loading_cat_radialJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading_cat_radialJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lying_cat", withExtension: "json")`
    static func lying_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lying_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "notification_bell", withExtension: "json")`
    static func notification_bellJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notification_bellJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "package", withExtension: "json")`
    static func packageJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.packageJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "rainbow_cat", withExtension: "json")`
    static func rainbow_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rainbow_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sleeping_cat", withExtension: "json")`
    static func sleeping_catJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sleeping_catJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "trophy", withExtension: "json")`
    static func trophyJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.trophyJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 27 images.
  struct image {
    /// Image `arrow-down`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-down")
    /// Image `arrow-left`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-left")
    /// Image `arrow-right`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow-right")
    /// Image `bookmark-filled`.
    static let bookmarkFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark-filled")
    /// Image `bookmark`.
    static let bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark")
    /// Image `category-filled`.
    static let categoryFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "category-filled")
    /// Image `category`.
    static let category = Rswift.ImageResource(bundle: R.hostingBundle, name: "category")
    /// Image `chevron-down`.
    static let chevronDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-down")
    /// Image `chevron-up`.
    static let chevronUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron-up")
    /// Image `home-filled`.
    static let homeFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-filled")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `magnifying-glass-filled`.
    static let magnifyingGlassFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "magnifying-glass-filled")
    /// Image `magnifying-glass`.
    static let magnifyingGlass = Rswift.ImageResource(bundle: R.hostingBundle, name: "magnifying-glass")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `placeholder-tile`.
    static let placeholderTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder-tile")
    /// Image `reload`.
    static let reload = Rswift.ImageResource(bundle: R.hostingBundle, name: "reload")
    /// Image `tabbar-bookmark-filled`.
    static let tabbarBookmarkFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-bookmark-filled")
    /// Image `tabbar-bookmark`.
    static let tabbarBookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-bookmark")
    /// Image `tabbar-category-filled`.
    static let tabbarCategoryFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-category-filled")
    /// Image `tabbar-category`.
    static let tabbarCategory = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-category")
    /// Image `tabbar-home-filled`.
    static let tabbarHomeFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-home-filled")
    /// Image `tabbar-home`.
    static let tabbarHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-home")
    /// Image `tabbar-magnifying-glass-filled`.
    static let tabbarMagnifyingGlassFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-magnifying-glass-filled")
    /// Image `tabbar-magnifying-glass`.
    static let tabbarMagnifyingGlass = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar-magnifying-glass")
    /// Image `trash-bin`.
    static let trashBin = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash-bin")
    /// Image `triangle-left`.
    static let triangleLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle-left")
    /// Image `triangle-right`.
    static let triangleRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle-right")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-down", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-left", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow-right", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark", bundle: ..., traitCollection: ...)`
    static func bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark-filled", bundle: ..., traitCollection: ...)`
    static func bookmarkFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "category", bundle: ..., traitCollection: ...)`
    static func category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "category-filled", bundle: ..., traitCollection: ...)`
    static func categoryFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categoryFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-down", bundle: ..., traitCollection: ...)`
    static func chevronDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron-up", bundle: ..., traitCollection: ...)`
    static func chevronUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-filled", bundle: ..., traitCollection: ...)`
    static func homeFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magnifying-glass", bundle: ..., traitCollection: ...)`
    static func magnifyingGlass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magnifyingGlass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magnifying-glass-filled", bundle: ..., traitCollection: ...)`
    static func magnifyingGlassFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magnifyingGlassFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder-tile", bundle: ..., traitCollection: ...)`
    static func placeholderTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderTile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reload", bundle: ..., traitCollection: ...)`
    static func reload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-bookmark", bundle: ..., traitCollection: ...)`
    static func tabbarBookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarBookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-bookmark-filled", bundle: ..., traitCollection: ...)`
    static func tabbarBookmarkFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarBookmarkFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-category", bundle: ..., traitCollection: ...)`
    static func tabbarCategory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCategory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-category-filled", bundle: ..., traitCollection: ...)`
    static func tabbarCategoryFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarCategoryFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-home", bundle: ..., traitCollection: ...)`
    static func tabbarHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-home-filled", bundle: ..., traitCollection: ...)`
    static func tabbarHomeFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarHomeFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-magnifying-glass", bundle: ..., traitCollection: ...)`
    static func tabbarMagnifyingGlass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMagnifyingGlass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar-magnifying-glass-filled", bundle: ..., traitCollection: ...)`
    static func tabbarMagnifyingGlassFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbarMagnifyingGlassFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash-bin", bundle: ..., traitCollection: ...)`
    static func trashBin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trashBin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "triangle-left", bundle: ..., traitCollection: ...)`
    static func triangleLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangleLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "triangle-right", bundle: ..., traitCollection: ...)`
    static func triangleRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangleRight, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `ComicEpisodeThumbnailTableCell`.
    static let comicEpisodeThumbnailTableCell = _R.nib._ComicEpisodeThumbnailTableCell()
    /// Nib `ComicRankTableCell`.
    static let comicRankTableCell = _R.nib._ComicRankTableCell()
    /// Nib `ComicThumbnailCollectionCell`.
    static let comicThumbnailCollectionCell = _R.nib._ComicThumbnailCollectionCell()
    /// Nib `DescriptionHeaderReusableView`.
    static let descriptionHeaderReusableView = _R.nib._DescriptionHeaderReusableView()
    /// Nib `PopOverComicEpisodeTableCell`.
    static let popOverComicEpisodeTableCell = _R.nib._PopOverComicEpisodeTableCell()
    /// Nib `SearchHistoryCollectionCell`.
    static let searchHistoryCollectionCell = _R.nib._SearchHistoryCollectionCell()
    /// Nib `SearchResultComicCollectionCell`.
    static let searchResultComicCollectionCell = _R.nib._SearchResultComicCollectionCell()
    /// Nib `SingleButtonFooterReusableView`.
    static let singleButtonFooterReusableView = _R.nib._SingleButtonFooterReusableView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicEpisodeThumbnailTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicEpisodeThumbnailTableCell) instead")
    static func comicEpisodeThumbnailTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicEpisodeThumbnailTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicRankTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicRankTableCell) instead")
    static func comicRankTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicRankTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ComicThumbnailCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.comicThumbnailCollectionCell) instead")
    static func comicThumbnailCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comicThumbnailCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DescriptionHeaderReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.descriptionHeaderReusableView) instead")
    static func descriptionHeaderReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.descriptionHeaderReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopOverComicEpisodeTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popOverComicEpisodeTableCell) instead")
    static func popOverComicEpisodeTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popOverComicEpisodeTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHistoryCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHistoryCollectionCell) instead")
    static func searchHistoryCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHistoryCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchResultComicCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchResultComicCollectionCell) instead")
    static func searchResultComicCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchResultComicCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleButtonFooterReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleButtonFooterReusableView) instead")
    static func singleButtonFooterReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleButtonFooterReusableView)
    }
    #endif

    static func comicEpisodeThumbnailTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicEpisodeThumbnailTableCell? {
      return R.nib.comicEpisodeThumbnailTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicEpisodeThumbnailTableCell
    }

    static func comicRankTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicRankTableCell? {
      return R.nib.comicRankTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicRankTableCell
    }

    static func comicThumbnailCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicThumbnailCollectionCell? {
      return R.nib.comicThumbnailCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicThumbnailCollectionCell
    }

    static func descriptionHeaderReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionHeaderReusableView? {
      return R.nib.descriptionHeaderReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionHeaderReusableView
    }

    static func popOverComicEpisodeTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopOverComicEpisodeTableCell? {
      return R.nib.popOverComicEpisodeTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopOverComicEpisodeTableCell
    }

    static func searchHistoryCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryCollectionCell? {
      return R.nib.searchHistoryCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryCollectionCell
    }

    static func searchResultComicCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultComicCollectionCell? {
      return R.nib.searchResultComicCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultComicCollectionCell
    }

    static func singleButtonFooterReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleButtonFooterReusableView? {
      return R.nib.singleButtonFooterReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleButtonFooterReusableView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ComicEpisodeThumbnailTableCell`.
    static let comicEpisodeThumbnailTableCell: Rswift.ReuseIdentifier<ComicEpisodeThumbnailTableCell> = Rswift.ReuseIdentifier(identifier: "ComicEpisodeThumbnailTableCell")
    /// Reuse identifier `ComicRankTableCell`.
    static let comicRankTableCell: Rswift.ReuseIdentifier<ComicRankTableCell> = Rswift.ReuseIdentifier(identifier: "ComicRankTableCell")
    /// Reuse identifier `ComicThumbnailCollectionCell`.
    static let comicThumbnailCollectionCell: Rswift.ReuseIdentifier<ComicThumbnailCollectionCell> = Rswift.ReuseIdentifier(identifier: "ComicThumbnailCollectionCell")
    /// Reuse identifier `DescriptionHeaderReusableView`.
    static let descriptionHeaderReusableView: Rswift.ReuseIdentifier<DescriptionHeaderReusableView> = Rswift.ReuseIdentifier(identifier: "DescriptionHeaderReusableView")
    /// Reuse identifier `PopOverComicEpisodeTableCell`.
    static let popOverComicEpisodeTableCell: Rswift.ReuseIdentifier<PopOverComicEpisodeTableCell> = Rswift.ReuseIdentifier(identifier: "PopOverComicEpisodeTableCell")
    /// Reuse identifier `SearchHistoryCollectionCell`.
    static let searchHistoryCollectionCell: Rswift.ReuseIdentifier<SearchHistoryCollectionCell> = Rswift.ReuseIdentifier(identifier: "SearchHistoryCollectionCell")
    /// Reuse identifier `SearchResultComicCollectionCell`.
    static let searchResultComicCollectionCell: Rswift.ReuseIdentifier<SearchResultComicCollectionCell> = Rswift.ReuseIdentifier(identifier: "SearchResultComicCollectionCell")
    /// Reuse identifier `singleButtonFooterReusableView`.
    static let singleButtonFooterReusableView: Rswift.ReuseIdentifier<SingleButtonFooterReusableView> = Rswift.ReuseIdentifier(identifier: "singleButtonFooterReusableView")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// Value: 검색결과가 없습니다.
      static let messageEmptyResult = Rswift.StringResource(key: "message.emptyResult", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 검색기록
      static let titleSearchHistory = Rswift.StringResource(key: "title.searchHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 검색기록이 없습니다.
      static let messageNoSearchHistory = Rswift.StringResource(key: "message.noSearchHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 검색중...
      static let messageSearching = Rswift.StringResource(key: "message.searching", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 기록삭제
      static let titleRemoveHistory = Rswift.StringResource(key: "title.removeHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 마지막 화 입니다.
      static let messageLastEpisode = Rswift.StringResource(key: "message.lastEpisode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 삭제
      static let titleRemove = Rswift.StringResource(key: "title.remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 삭제 버튼을 눌러 시청 기록을 삭제할 수 있습니다. 삭제 후 데이터 복원은 어렵습니다.
      static let messageRemoveHistory = Rswift.StringResource(key: "message.removeHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 아직 시청기록이 없습니다.
      static let messageEmptyWatchHistory = Rswift.StringResource(key: "message.emptyWatchHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 에 대한 검색결과
      static let titleSearchResultHeader = Rswift.StringResource(key: "title.searchResultHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 전체삭제
      static let titleDeleteAll = Rswift.StringResource(key: "title.deleteAll", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 첫 화 입니다.
      static let messageFirstEpisode = Rswift.StringResource(key: "message.firstEpisode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 최소 두 글자 이상의 단어로 검색해주세요
      static let messageSearchKeywordConstraint = Rswift.StringResource(key: "message.searchKeywordConstraint", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 취소
      static let titleCancel = Rswift.StringResource(key: "title.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 🛠서버 점검중입니다. 나중에 다시 시도해주세요.
      static let messageServerError = Rswift.StringResource(key: "message.serverError", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 검색결과가 없습니다.
      static func messageEmptyResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.emptyResult", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.emptyResult"
        }

        return NSLocalizedString("message.emptyResult", bundle: bundle, comment: "")
      }

      /// Value: 검색기록
      static func titleSearchHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.searchHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.searchHistory"
        }

        return NSLocalizedString("title.searchHistory", bundle: bundle, comment: "")
      }

      /// Value: 검색기록이 없습니다.
      static func messageNoSearchHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.noSearchHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.noSearchHistory"
        }

        return NSLocalizedString("message.noSearchHistory", bundle: bundle, comment: "")
      }

      /// Value: 검색중...
      static func messageSearching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.searching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.searching"
        }

        return NSLocalizedString("message.searching", bundle: bundle, comment: "")
      }

      /// Value: 기록삭제
      static func titleRemoveHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.removeHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.removeHistory"
        }

        return NSLocalizedString("title.removeHistory", bundle: bundle, comment: "")
      }

      /// Value: 마지막 화 입니다.
      static func messageLastEpisode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.lastEpisode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.lastEpisode"
        }

        return NSLocalizedString("message.lastEpisode", bundle: bundle, comment: "")
      }

      /// Value: 삭제
      static func titleRemove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.remove"
        }

        return NSLocalizedString("title.remove", bundle: bundle, comment: "")
      }

      /// Value: 삭제 버튼을 눌러 시청 기록을 삭제할 수 있습니다. 삭제 후 데이터 복원은 어렵습니다.
      static func messageRemoveHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.removeHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.removeHistory"
        }

        return NSLocalizedString("message.removeHistory", bundle: bundle, comment: "")
      }

      /// Value: 아직 시청기록이 없습니다.
      static func messageEmptyWatchHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.emptyWatchHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.emptyWatchHistory"
        }

        return NSLocalizedString("message.emptyWatchHistory", bundle: bundle, comment: "")
      }

      /// Value: 에 대한 검색결과
      static func titleSearchResultHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.searchResultHeader", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.searchResultHeader"
        }

        return NSLocalizedString("title.searchResultHeader", bundle: bundle, comment: "")
      }

      /// Value: 전체삭제
      static func titleDeleteAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.deleteAll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.deleteAll"
        }

        return NSLocalizedString("title.deleteAll", bundle: bundle, comment: "")
      }

      /// Value: 첫 화 입니다.
      static func messageFirstEpisode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.firstEpisode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.firstEpisode"
        }

        return NSLocalizedString("message.firstEpisode", bundle: bundle, comment: "")
      }

      /// Value: 최소 두 글자 이상의 단어로 검색해주세요
      static func messageSearchKeywordConstraint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.searchKeywordConstraint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.searchKeywordConstraint"
        }

        return NSLocalizedString("message.searchKeywordConstraint", bundle: bundle, comment: "")
      }

      /// Value: 취소
      static func titleCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title.cancel"
        }

        return NSLocalizedString("title.cancel", bundle: bundle, comment: "")
      }

      /// Value: 🛠서버 점검중입니다. 나중에 다시 시도해주세요.
      static func messageServerError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("message.serverError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "message.serverError"
        }

        return NSLocalizedString("message.serverError", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SearchHistoryCollectionCell.validate()
    }

    struct _ComicEpisodeThumbnailTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicEpisodeThumbnailTableCell

      let bundle = R.hostingBundle
      let identifier = "ComicEpisodeThumbnailTableCell"
      let name = "ComicEpisodeThumbnailTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicEpisodeThumbnailTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicEpisodeThumbnailTableCell
      }

      fileprivate init() {}
    }

    struct _ComicRankTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicRankTableCell

      let bundle = R.hostingBundle
      let identifier = "ComicRankTableCell"
      let name = "ComicRankTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicRankTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicRankTableCell
      }

      fileprivate init() {}
    }

    struct _ComicThumbnailCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ComicThumbnailCollectionCell

      let bundle = R.hostingBundle
      let identifier = "ComicThumbnailCollectionCell"
      let name = "ComicThumbnailCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ComicThumbnailCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ComicThumbnailCollectionCell
      }

      fileprivate init() {}
    }

    struct _DescriptionHeaderReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DescriptionHeaderReusableView

      let bundle = R.hostingBundle
      let identifier = "DescriptionHeaderReusableView"
      let name = "DescriptionHeaderReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionHeaderReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionHeaderReusableView
      }

      fileprivate init() {}
    }

    struct _PopOverComicEpisodeTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PopOverComicEpisodeTableCell

      let bundle = R.hostingBundle
      let identifier = "PopOverComicEpisodeTableCell"
      let name = "PopOverComicEpisodeTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopOverComicEpisodeTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopOverComicEpisodeTableCell
      }

      fileprivate init() {}
    }

    struct _SearchHistoryCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchHistoryCollectionCell

      let bundle = R.hostingBundle
      let identifier = "SearchHistoryCollectionCell"
      let name = "SearchHistoryCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "trash-bin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash-bin' is used in nib 'SearchHistoryCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in nib 'SearchHistoryCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack-lighter' is used in nib 'SearchHistoryCollectionCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in nib 'SearchHistoryCollectionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SearchResultComicCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchResultComicCollectionCell

      let bundle = R.hostingBundle
      let identifier = "SearchResultComicCollectionCell"
      let name = "SearchResultComicCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchResultComicCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchResultComicCollectionCell
      }

      fileprivate init() {}
    }

    struct _SingleButtonFooterReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SingleButtonFooterReusableView

      let bundle = R.hostingBundle
      let identifier = "singleButtonFooterReusableView"
      let name = "SingleButtonFooterReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SingleButtonFooterReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SingleButtonFooterReusableView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try comicDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try comicStrip.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try popOverComicEpisode.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchComic.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchHistory.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchResult.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try watchHistory.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct comicDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ComicDetailViewController

      let bundle = R.hostingBundle
      let comicDetailStoryboard = StoryboardViewControllerResource<ComicDetailViewController>(identifier: "ComicDetailStoryboard")
      let name = "ComicDetail"

      func comicDetailStoryboard(_: Void = ()) -> ComicDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicDetailStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-down' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentYellow' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite-lighter' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack-light' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack-lighter' is used in storyboard 'ComicDetail', but couldn't be loaded.") }
        }
        if _R.storyboard.comicDetail().comicDetailStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicDetailStoryboard' could not be loaded from storyboard 'ComicDetail' as 'ComicDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct comicStrip: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let comicStripStroyboard = StoryboardViewControllerResource<ComicStripViewController>(identifier: "ComicStripStroyboard")
      let name = "ComicStrip"

      func comicStripStroyboard(_: Void = ()) -> ComicStripViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comicStripStroyboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle-left' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle-right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle-right' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite-lighter' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in storyboard 'ComicStrip', but couldn't be loaded.") }
        }
        if _R.storyboard.comicStrip().comicStripStroyboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comicStripStroyboard' could not be loaded from storyboard 'ComicStrip' as 'ComicStripViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let mainStoryboard = StoryboardViewControllerResource<MainViewController>(identifier: "MainStoryboard")
      let name = "Main"

      func mainStoryboard(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainStoryboard)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.clockwise' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "magnifying-glass-filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magnifying-glass-filled' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite-lighter' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack-lighter' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack-light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack-light' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack-lighter' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().mainStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainStoryboard' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct popOverComicEpisode: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopOverComicEpisode"
      let popOverComicEpisodeStoryboard = StoryboardViewControllerResource<PopOverComicEpisodeViewController>(identifier: "PopOverComicEpisodeStoryboard")

      func popOverComicEpisodeStoryboard(_: Void = ()) -> PopOverComicEpisodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popOverComicEpisodeStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'PopOverComicEpisode', but couldn't be loaded.") }
        }
        if _R.storyboard.popOverComicEpisode().popOverComicEpisodeStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popOverComicEpisodeStoryboard' could not be loaded from storyboard 'PopOverComicEpisode' as 'PopOverComicEpisodeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchComic: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "SearchComic"
      let searchComicStoryboard = StoryboardViewControllerResource<SearchComicViewController>(identifier: "SearchComicStoryboard")

      func searchComicStoryboard(_: Void = ()) -> SearchComicViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchComicStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'SearchComic', but couldn't be loaded.") }
        if UIKit.UIImage(named: "magnifying-glass-filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'magnifying-glass-filled' is used in storyboard 'SearchComic', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite-lighter' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack-lighter' is used in storyboard 'SearchComic', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in storyboard 'SearchComic', but couldn't be loaded.") }
        }
        if _R.storyboard.searchComic().searchComicStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchComicStoryboard' could not be loaded from storyboard 'SearchComic' as 'SearchComicViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchHistory: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchHistory"
      let searchHistoryStoryboard = StoryboardViewControllerResource<SearchHistoryViewController>(identifier: "SearchHistoryStoryboard")

      func searchHistoryStoryboard(_: Void = ()) -> SearchHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchHistoryStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'SearchHistory', but couldn't be loaded.") }
        }
        if _R.storyboard.searchHistory().searchHistoryStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchHistoryStoryboard' could not be loaded from storyboard 'SearchHistory' as 'SearchHistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchResult: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchResult"
      let searchResultStoryboard = StoryboardViewControllerResource<SearchResultViewController>(identifier: "SearchResultStoryboard")

      func searchResultStoryboard(_: Void = ()) -> SearchResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchResultStoryboard)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'SearchResult', but couldn't be loaded.") }
        }
        if _R.storyboard.searchResult().searchResultStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchResultStoryboard' could not be loaded from storyboard 'SearchResult' as 'SearchResultViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct watchHistory: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "WatchHistory"
      let watchHistoryStoryboard = StoryboardViewControllerResource<WatchHistoryViewController>(identifier: "WatchHistoryStoryboard")

      func watchHistoryStoryboard(_: Void = ()) -> WatchHistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: watchHistoryStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow-left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow-left' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'WatchHistory', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentGreen' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BackgroundWhite-lighter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundWhite-lighter' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "IconBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IconBlack' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
          if UIKit.UIColor(named: "TextBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextBlack' is used in storyboard 'WatchHistory', but couldn't be loaded.") }
        }
        if _R.storyboard.watchHistory().watchHistoryStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'watchHistoryStoryboard' could not be loaded from storyboard 'WatchHistory' as 'WatchHistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
